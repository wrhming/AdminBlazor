@inherits AntDomComponentBase
@inject AuthenticationStateProvider authStateProvider

<Space Class="@ClassMapper.Class" Size="@("24")">
    <SpaceItem>
        <Badge Count="_count" Offset="(6, 0)" Size="small" >
            <Icon Type="bell" Theme="outline" Style="cursor:pointer;" @onclick="ToMessage" />
        </Badge>
    </SpaceItem>
    <SpaceItem>
        <AuthorizeView>
            <Authorized>
                <AvatarDropdown Name="@context.User.Identity.Name" Avatar="/images/default.png"
                                MenuItems="@AvatarMenuItems"
                                OnItemSelected="HandleSelectUser" />
            </Authorized>
            <NotAuthorized>
                <h1>Hello,Guest!</h1>
            </NotAuthorized>
        </AuthorizeView>
        
    </SpaceItem>
</Space>

@code {
    private int _count = 0;

    public AvatarMenuItem[] AvatarMenuItems { get; set; } = new AvatarMenuItem[]
    {
            new() { Key = "setting", IconType = "setting", Option = "个人设置"},
            new() { IsDivider = true },
            new() { Key = "logout", IconType = "logout", Option = "退出登录"}
    };

    [Inject] protected NavigationManager NavigationManager { get; set; }

    [Inject] protected MessageService MessageService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        SetClassMap();

        _count = 5;
    }

    protected void SetClassMap()
    {
        ClassMapper
            .Clear()
            .Add("right");
    }

    public async Task HandleSelectUser(MenuItem item)
    {
        switch (item.Key)
        {
            case "setting":
                NavigationManager.NavigateTo("/account/settings");
                break;
            case "logout":
                var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
                await customAuthStateProvider.UpdateAuthenticationState(null);
                NavigationManager.NavigateTo("/user/login");
                break;
        }
    }

    public void ToMessage()
    {
        NavigationManager.NavigateTo("/message/list");
    }
}
